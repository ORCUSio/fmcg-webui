<%- include('../partials/top') %>


<div class="container-xxl flex-grow-1 container-p-y">
  <h4 class="fw-bold py-3 mb-4">
    <!-- <span class="text-muted fw-light">Account Settings /</span> -->
    GODOWN TRANSFER
  </h4>

  <div class="row">
    <div class="col-md-12">

      <!-- Change Password -->
      <div class="card mb-4">
        <div class="card-body">
          <form autocomplete="off" action="/godown" method="post">
            <div class="row">
              <div class="col-md-6">
                <div class="form-floating mb-3">
                  <input type="date" class="form-control" id="date" name="date" required>
                  <label for="date">Date</label>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-floating mb-3">
                  <input type="number" class="form-control" id="receipt-no" name="receiptNo" placeholder="Receipt No." required value="" min="1">
                  <label for="receipt-no">Receipt No.</label>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-floating mb-3">
                  <input type="text" class="form-control" id="from-godown" name="from-godown" placeholder="From-godown." required value="" min="1">
                  <label for="from-godown">From godown.</label>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-floating mb-3">
                  <input type="text" class="form-control" id="to-godown" name="to-godown" placeholder="To-godown." required value="" min="1">
                  <label for="to-godown">From godown.</label>
                </div>
              </div>
              <div class="col-md-12">
                <div class="accordion" id="itemContainer">



                </div>
              </div>
            </div>

            <br>
            <br>
            <br>
            <br>


            <div class="col-12 mt-1" style="display: flex; justify-content: end;">
              <button type="reset" class="btn btn-label-secondary" style="margin-right:20px">Cancel</button>
              <button type="submit" class="btn btn-primary me-2">Save changes</button>
            </div>
          </form>

          <script>
            // Set today's date as the default value for the date input
            document.addEventListener('DOMContentLoaded', (event) => {
              //  const today = new Date().toISOString().split('T')[0];
              // timezone india
              const today = new Date().toLocaleString('en-CA').split(',')[0];
              document.getElementById("date").value = today;

              const time = new Date().toLocaleString('en-CA').split(',')[1];
            });
          </script>


        </div>
      </div>
    </div>
    <!--/ Change Password -->




  </div>
</div>


<%- include('../partials/bottom') %>

<script>
  let itemCounter = 0;
  let itemContainer = document.getElementById("itemContainer");
  let items = [];

  (async () => {

    const url = "http://localhost/api/dbf/pmpl.json";
    const response = await fetch(url);
    const json = await response.json();
    // for each object in json array, take out C_NAME as name and C_CODE as email
    let usersList = json.map(user => ({
      name: user.PRODUCT,
      title: user.PRODUCT,
      email: `${user.C_CODE} | ${user.MRP1}`,
      value: user.C_CODE,
      avatar: "/assets/img/avatars/3.png"
    }));



    usersList = usersList.filter(user => user.name && user.email);
    // usersList = usersList.slice(2);

    // just keep the keys name,title,email,Email,avatar from each obj in userlist


    // tagifyElement("#party", usersList);

    addItem(usersList)





  })()

  function addItem(usersList) {
    itemCounter++;
    let item = document.createElement("div");
    // set the div to <div class="accordion-item" id="item${itemCounter}">
    item.classList.add("accordion-item");
    item.id = `item${itemCounter}`;

    item.innerHTML = `
      <h2 class="accordion-header" id="heading${itemCounter}"> 
      <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse${itemCounter}" aria-expanded="true" aria-controls="collapse${itemCounter}">
        Add a new Item
      </button>
    </h2>
    <div id="collapse${itemCounter}" class="accordion-collapse collapse show" aria-labelledby="heading${itemCounter}" data-bs-parent="#accordionExample"> 
     <div class="accordion-body">
           <div class="row">
              <div class="col-md-3">
                 <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="item-name-${itemCounter}" name="item-name" placeholder="" required>
                    <label for="item-name">Item Name</label>
                 </div>
              </div>
              
            <div class="col-md-3">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="item-gst-${itemCounter}" name="item-gst" placeholder="GST" required>
                    <label for="item-gst">GST</label>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="item-mrp-${itemCounter}" name="item-mrp" placeholder="MRP" required>
                    <label for="item-mrp">MRP</label>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="item-rate-${itemCounter}" name="item-rate" placeholder="Rate" required>
                    <label for="item-rate">Rate</label>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="item-qty-${itemCounter}" name="item-qty" placeholder="Quantity" required>
                    <label for="item-qty">Quantity</label>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="item-amount-${itemCounter}" name="item-amount" placeholder="Amount" required>
                    <label for="item-amount">Amount</label>
                </div>
            </div>
              

           </div>
              
        </div>
  </div>
      `;

    itemContainer.appendChild(item);

    tagifyElement(`#item-name-${itemCounter}`, usersList);


  }


  function tagifyElement(tagSEL, usersList) {



const TagifyUserListEl = document.querySelector(tagSEL);


function tagTemplate(tagData) {
  return `
      <tag title="${tagData.title || tagData.email}"
      contenteditable='false'
      spellcheck='false'
      tabIndex="-1"
      class="${this.settings.classNames.tag} ${tagData.class ? tagData.class : ''}"
      ${this.getAttributes(tagData)}
      >
      <x title='' class='tagify__tag__removeBtn' role='button' aria-label='remove tag'></x>
      <div>
         <div class='tagify__tag__avatar-wrap'>
            <img onerror="this.style.visibility='hidden'" src="${tagData.avatar}">
         </div>
         <span class='tagify__tag-text'>${tagData.name}</span>
      </div>
      </tag>
      `;
}

function suggestionItemTemplate(tagData) {
  return `
      <div ${this.getAttributes(tagData)}
      class='tagify__dropdown__item align-items-center ${tagData.class ? tagData.class : ''}'
      tabindex="0"
      role="option"
      >
      ${tagData.avatar ?
               `<div class='tagify__dropdown__item__avatar-wrap'>
            <img onerror="this.style.visibility='hidden'" src="${tagData.avatar}">
         </div>`
               : ''
            }
      <strong>${tagData.name}</strong>
      <span>${tagData.email}</span>
      </div>
      `;
}

// initialize Tagify on the above input node reference
let TagifyUserList = new Tagify(TagifyUserListEl, {
  // mode:"select",
  tagTextProp: "name", // very important since a custom template is used with this property as text. allows typing a "value" or a "name" to match input with whitelist
  enforceWhitelist: true,
  maxTags: 1,
  skipInvalid: true, // do not remporarily add invalid tags
  maxTags: 1,
  dropdown: {
    closeOnSelect: true,
    enabled: 0,
    classname: "users-list",
    searchKeys: ["name", "email"] // very important to set by which keys to search for suggesttions when typing
  },
  templates: {
    tag: tagTemplate,
    dropdownItem: suggestionItemTemplate
  },
  whitelist: usersList
});

TagifyUserList.on("dropdown:show dropdown:updated", onDropdownShow);
TagifyUserList.on("dropdown:select", onSelectSuggestion);

let addAllSuggestionsEl;

function onDropdownShow(e) {
  let dropdownContentEl = e.detail.tagify.DOM.dropdown.content;

  if (TagifyUserList.suggestedListItems.length > 1) {
    // addAllSuggestionsEl = getAddAllSuggestionsEl();

    // insert "addAllSuggestionsEl" as the first element in the suggestions list
    // dropdownContentEl.insertBefore(addAllSuggestionsEl, dropdownContentEl.firstChild);
  }
}

function onSelectSuggestion(e) {
  if (e.detail.elm == addAllSuggestionsEl) TagifyUserList.dropdown.selectAll.call(TagifyUserList);
}

function submit() {
  TagifyUserList.value.forEach(element => {
    changepassword(element.value);
  });
}


}

</script>



</body>

</html>